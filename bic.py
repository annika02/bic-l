# -*- coding: utf-8 -*-
"""bic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YGVPSiBkZ09qfHu2uTyK4lkKuwYva3Az

Number of Times a Pattern Appears in a Text(ba1a)
"""

st = input()
pt = input()
cnt = 0
for i in range (len(st)-len(pt)+1):
  sub_str = st[i:i+len(pt)]
  if sub_str == pt:
    cnt = cnt + 1
print(cnt)

"""Find the Most Frequent Words in a String (ba1b)"""

st = input()
k = 4
o = {}
for i in range (len(st) - k + 1):
  pattern = st[i:i+k]
  if pattern in o.keys():
    o[pattern] += 1
  else:
    o[pattern] = 1
PrintMax =" "
max = 0
for index,val in o.items():
  if val > max :
    PrintMax = index
    max = val
  else:
    if val == max :
      PrintMax += " "+ index
print(PrintMax)

"""Find the Reverse Complement of a String(ba1c)"""

str = input()
s = " "
for i in range(len(str)):
  if str[i] == 'A':
    s+= 'T'
  elif str[i] == 'T':
    s+= 'A'
  elif str[i] == 'G':
    s+= 'C'
  elif str[i] == 'C':
    s+= 'G'
s = s[::-1]
print(s)

"""Find All Occurrences of a Pattern in a String (ba1d)

"""

pt = input()
st = input()
lst = []

for i in range (len(st)-len(pt)+1):
  sub_str = st[i:i+len(pt)]
  if sub_str == pt:
    lst.append(i)
print(*lst)

"""Find Patterns Forming Clumps in a String (ba1e)"""

st = input()
k, L, t = map(int,input().split())
lst =[]
for i in range (len(st) - L + 1):
  window = st[i:i+L]
  for j in range (L - k + 1):
    sub_str = window[j:j+k]
    if window.count(sub_str)>= t:
      lst.append(sub_str)
ans = set(lst)
print(*ans)

"""Find a Position in a Genome Minimizing the Skew(ba1f)"""

data = input()

minPos = 0 # float('inf')
pos = 0
res = []

for i in range(len(data)):
    if data[i] == 'G':
        pos += 1
    elif data[i] == 'C':
        pos -= 1

    if pos < minPos:
        minPos = pos
        res = [i + 1]
    elif pos == minPos:
        res.append(i + 1)


final_res = set(res)
print(*final_res)

"""Compute the Hamming Distance Between Two Strings (ba1g)"""

st1 = input()
st2 = input()
cnt = 0
for i in range(len(st1)):
  if st1[i]!=st2[i]:
    cnt += 1
print(cnt)

"""Find All Approximate Occurrences of a Pattern in a String (ba1h)"""

pt = input()
st = input()
d = int(input())
cnt = 0
lst = []

for i in range(len(st) - len(pt) + 1):
    sub_str = st[i:i+len(pt)]
    cnt = 0
    for j in range(len(pt)):
        if sub_str[j] != pt[j]:
            cnt += 1
    if cnt <= d:
        lst.append(i)

print(*lst)

